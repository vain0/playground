/// <auto-generated />

using System;
using Dgh = DeriveGen.Internals.Helper;

namespace DeriveGen.Internals
{
    internal static class Helper
    {
        public static int Hash<T>(T value)
        {
            return System.Collections.Generic.EqualityComparer<T>.Default.GetHashCode(value);
        }
    }
}

namespace JohnDoe.AwesomeApp
{
    public sealed partial class Person
        : IEquatable<Person>
    {
        public readonly string Name;
        public readonly int Age;

        public Person(string name, int age)
        {
            Name = name;
            Age = age;
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as Person);
        }

        public bool Equals(Person other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (ReferenceEquals(other, null)) return false;
            return Name == other.Name
                && Age == other.Age;
        }

        public override int GetHashCode()
        {
            return Dgh.Hash(Name) ^ Dgh.Hash(Age);
        }

        public static bool operator ==(Person l, Person r)
        {
            return l.Equals(r);
        }

        public static bool operator !=(Person l, Person r)
        {
            return !(l == r);
        }
    }

    public partial struct PersonId
        : IEquatable<PersonId>
    {
        public readonly long Value;

        public PersonId(long value)
        {
            Value = value;
        }

        public override bool Equals(object obj)
        {
            return obj is PersonId && Equals((PersonId)obj);
        }

        public bool Equals(PersonId other)
        {
            return Value == other.Value;
        }

        public override int GetHashCode()
        {
            return Dgh.Hash(Value);
        }

        public static bool operator ==(PersonId l, PersonId r)
        {
            return l.Equals(r);
        }

        public static bool operator !=(PersonId l, PersonId r)
        {
            return !(l == r);
        }

        public override string ToString()
        {
            return new System.Text.StringBuilder().Append("PersonId {")
                .Append("\"Value\": ").Append(Value)
                .Append("}").ToString();
        }
    }
}
