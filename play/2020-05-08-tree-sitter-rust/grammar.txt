# Jacco 言語
# ブロック {} の直後のセミコロンを省略できる Rust 風の文法
# (処理系: <https://github.com/vain0x/languages/tree/master/jacco-lang)

# ブロックで終わる場合を closed 、終わらない場合を open と呼ぶことにする。
# 末尾が '}' になるかどうかで規則を分けている。

# Rust と違って、if などの式は式のトップレベルとして出現する。
# 例えば `if {} + x` のように、二項演算の直下に if 式が出現する式は NG。
# 代わりに、`(if {}) + x` のようにカッコをつかえば、カッコの内側は式のトップレベルなので OK になる。
# なお、`x + if {}` のように if 式が末尾に来るケースは許可するようにしたい。

ty = IDENT;

pat = IDENT;

group_expr = '(' expr ')';

array_list_expr = '[' (expr (',' expr)* ','?)? ']';

array_replicate_expr = '[' expr ';' expr ']';

atomic_expr_open =
    | IDENT
    | group_expr
    | array_list_expr
    | array_replicate_expr
    ;

call_expr = suffix_expr_open '(' ')';

suffix_expr_open =
    | call_expr
    | atomic_expr_open
    ;

mul_expr_open = multitive_expr '*' suffix_expr_open;

div_expr_open = multitive_expr '/' suffix_expr_open;

multitive_expr =
    | mul_expr_open
    | div_expr_open
    | suffix_expr_open
    ;

add_expr_open = additive_expr '+' multitive_expr;

sub_expr_open = additive_expr '-' multitive_expr;

additive_expr =
    | add_expr_open
    | sub_expr_open
    | multitive_expr
    ;

arm_open = pat '=>' expr_open;

arm_closed = pat '=>' expr_closed;

arms1 =
    | arm_open (',' arms1)?
    | arm_closed arms1?
    ;

match_expr = 'match' cond '{' arms1? '}';

fn_expr_open = 'fn' '(' ')' expr_open;

fn_expr_closed = 'fn' '(' ')' ('->' ty block | expr_closed);

expr_open =
    | additive_expr
    | fn_expr_open
    ;

expr_closed =
    | block
    | match_expr
    | fn_expr_closed
    ;

expr =
    | expr_open
    | expr_closed
    ;

cond = expr;

let_decl_open = 'let' pat '=' expr_open;

let_decl_closed = 'let' pat '=' expr_closed;

fn_decl = 'fn' IDENT '(' ')' block;

decl_open =
    | let_decl_open
    | expr_open
    ;

decl_closed =
    | let_decl_closed
    | fn_decl
    | expr_closed
    ;

semi =
    | decl_open (';'+ semi | ';'*)
    | decl_closed ';'* semi?
    ;

block = '{' ';'* semi? '}';

program = ';'* semi?;
